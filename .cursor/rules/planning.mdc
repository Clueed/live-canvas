---
description: 
globs: 
alwaysApply: false
---
# Iterative Task Planning Guideline

## Introduction / Problem

When tackling complex coding tasks, especially with AI assistance, a well-structured and actionable plan is crucial. This guideline outlines an iterative process to create such plans, ensuring they are both comprehensive and tailored to the specific codebase. Effective planning is an **iterative and collaborative dialogue**, where the plan evolves with new insights and feedback.

The core principle of this planning process is **incremental implementation through focused steps and placeholders**: each step should have a narrow scope, and any logic outside that scope is deferred using placeholder functions or stubs. This allows for flexibility and progressive detailing.

## The Iterative Planning Process

Follow these phases to develop an effective task plan:

### 1. Phase 1: General Outline & Documentation Review

*   **Understand the Goal:** Clearly define the objective of the plan based on the user\'s request. **Actively clarify the scope and desired outcomes with the user if any ambiguity exists.**
*   **Initial Draft:** Create a high-level outline of steps. **Document any key assumptions made during this initial phase to ensure they can be validated.**
*   **Consult Knowledge Sources:**
    *   Review relevant official documentation for tools or libraries involved.
    *   Incorporate general best practices.
    *   Utilize any provided documentation or context (e.g., attached files, web search results).
*   **Output:** A general plan that outlines the approach.

### 2. Phase 2: Codebase-Specific Customization & Deep Dive

*   **Thorough Codebase Analysis (Crucial):**
    *   Use available tools (`codebase_search`, `list_dir`, `read_file`, `grep_search`) to explore the project.
    *   Identify existing conventions, tools (e.g., package managers, linters, build systems, UI frameworks, specific database technologies, or server infrastructure), relevant file paths, and configurations.
    *   **Prioritize identifying and reusing existing project-specific helper functions, components, or established patterns to ensure consistency and efficiency.**
    *   Understand how the new task fits into the existing architecture and patterns.
*   **Tailor the Plan:**
    *   Replace general commands/steps with codebase-specific equivalents (e.g., use the project's designated package manager, update paths to match the project's directory structure, adapt to the project's chosen API style or database query language).
    *   Update file paths, variable names, and code examples to match project conventions.
    *   Consider how existing project tooling (linters, formatters, CI) will interact with the planned changes.
*   **Output:** A detailed plan customized for the target codebase.

### 3. Phase 3: Refinement, Structuring & Final Review

*   **Structure for Incremental Execution through Focused Steps:** This is the core of the planning structure.
    *   Organize the plan into a sequence of steps, each with a **very narrow and specific goal**.
    *   **Implement the Step's Core Logic:** Within each step, focus *only* on implementing the logic directly related to its narrow goal.
    *   **Use Placeholders for External Dependencies:** Any functionality or data structure required by the current step but *outside* its narrow scope **must** be represented by a placeholder function or stub (e.g., `function getRelatedData() { /* TODO: Implement in a later step */ throw new Error("Not implemented"); }`, or a simple type definition like `type RelatedData = unknown;`). These placeholders are contracts for future implementation.
    *   **Prioritize Dependency-Driven Sequencing:** Order steps based on their logical dependencies. A step that implements a placeholder used by a previous step should naturally follow it. The initial steps will likely define the higher-level structure and use more placeholders, while later steps will fill in these placeholder implementations.
    *   **Integration Last:** Steps involving integration into the broader system (e.g., exporting functions, adding components to registries, updating main application logic) should come *after* the core logic and its dependent placeholders have been implemented.
*   **Clarity and Conciseness:**
    *   Ensure each step clearly states its narrow goal.
    *   The plan should clearly show the progression from high-level structure (with many placeholders) to detailed implementation (as placeholders are filled in).
    *   Remove redundant information, focusing on actionable instructions for each step.
*   **Incorporate Feedback:** **Recognize the plan as a living document. Actively solicit and integrate user/stakeholder feedback throughout the planning phases, especially after initial drafts or significant changes.**
*   **Final Double-Check:**
    *   Verify all commands, file paths, and code snippets for accuracy within the context of the target project.
    *   Confirm the plan directly addresses the user's original request and incorporates all constraints.
*   **Output:** A final, actionable, incremental plan, typically written to `tmp/plan.md`.

## Key Characteristics of the Resulting Plan

The final plan created by this process **must** exhibit:

*   **Narrowly Focused Steps:** Each step has a precise, limited objective.
*   **Implicit Placeholder Usage:** Placeholders naturally arise for any logic outside a step's narrow scope, deferring complexity.
*   **Incremental Build-up:** The solution is constructed progressively, with placeholders being implemented in subsequent, focused steps.
*   **Defined Key Stages:** Broken down into logical steps reflecting this incremental build-up.
*   **Codebase Specificity:** All instructions and examples are tailored to the project's actual environment and conventions discovered during Phase 2.
*   **Dependency-Aware Sequencing:** Steps are ordered logically, allowing placeholders to be defined by one step and implemented by another.
*   **Conciseness:** Provides necessary detail without being verbose.
*   **Standard Location:** Stored in `tmp/plan.md` for easy access and review.
